/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TransactionsRouteImport } from './routes/transactions'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ReportsRouteImport } from './routes/reports'
import { Route as GoalsRouteImport } from './routes/goals'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as BudgetsRouteImport } from './routes/budgets'
import { Route as AccountsRouteImport } from './routes/accounts'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AccountsIndexRouteImport } from './routes/accounts/index'
import { Route as AccountsAccountIdRouteImport } from './routes/accounts.$accountId'

const TransactionsRoute = TransactionsRouteImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ReportsRoute = ReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => rootRouteImport,
} as any)
const GoalsRoute = GoalsRouteImport.update({
  id: '/goals',
  path: '/goals',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const BudgetsRoute = BudgetsRouteImport.update({
  id: '/budgets',
  path: '/budgets',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountsRoute = AccountsRouteImport.update({
  id: '/accounts',
  path: '/accounts',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountsIndexRoute = AccountsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AccountsRoute,
} as any)
const AccountsAccountIdRoute = AccountsAccountIdRouteImport.update({
  id: '/$accountId',
  path: '/$accountId',
  getParentRoute: () => AccountsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/accounts': typeof AccountsRouteWithChildren
  '/budgets': typeof BudgetsRoute
  '/dashboard': typeof DashboardRoute
  '/goals': typeof GoalsRoute
  '/reports': typeof ReportsRoute
  '/settings': typeof SettingsRoute
  '/transactions': typeof TransactionsRoute
  '/accounts/$accountId': typeof AccountsAccountIdRoute
  '/accounts/': typeof AccountsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/budgets': typeof BudgetsRoute
  '/dashboard': typeof DashboardRoute
  '/goals': typeof GoalsRoute
  '/reports': typeof ReportsRoute
  '/settings': typeof SettingsRoute
  '/transactions': typeof TransactionsRoute
  '/accounts/$accountId': typeof AccountsAccountIdRoute
  '/accounts': typeof AccountsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/accounts': typeof AccountsRouteWithChildren
  '/budgets': typeof BudgetsRoute
  '/dashboard': typeof DashboardRoute
  '/goals': typeof GoalsRoute
  '/reports': typeof ReportsRoute
  '/settings': typeof SettingsRoute
  '/transactions': typeof TransactionsRoute
  '/accounts/$accountId': typeof AccountsAccountIdRoute
  '/accounts/': typeof AccountsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/accounts'
    | '/budgets'
    | '/dashboard'
    | '/goals'
    | '/reports'
    | '/settings'
    | '/transactions'
    | '/accounts/$accountId'
    | '/accounts/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/budgets'
    | '/dashboard'
    | '/goals'
    | '/reports'
    | '/settings'
    | '/transactions'
    | '/accounts/$accountId'
    | '/accounts'
  id:
    | '__root__'
    | '/'
    | '/accounts'
    | '/budgets'
    | '/dashboard'
    | '/goals'
    | '/reports'
    | '/settings'
    | '/transactions'
    | '/accounts/$accountId'
    | '/accounts/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountsRoute: typeof AccountsRouteWithChildren
  BudgetsRoute: typeof BudgetsRoute
  DashboardRoute: typeof DashboardRoute
  GoalsRoute: typeof GoalsRoute
  ReportsRoute: typeof ReportsRoute
  SettingsRoute: typeof SettingsRoute
  TransactionsRoute: typeof TransactionsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/transactions': {
      id: '/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof TransactionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reports': {
      id: '/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/goals': {
      id: '/goals'
      path: '/goals'
      fullPath: '/goals'
      preLoaderRoute: typeof GoalsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/budgets': {
      id: '/budgets'
      path: '/budgets'
      fullPath: '/budgets'
      preLoaderRoute: typeof BudgetsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/accounts': {
      id: '/accounts'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof AccountsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/accounts/': {
      id: '/accounts/'
      path: '/'
      fullPath: '/accounts/'
      preLoaderRoute: typeof AccountsIndexRouteImport
      parentRoute: typeof AccountsRoute
    }
    '/accounts/$accountId': {
      id: '/accounts/$accountId'
      path: '/$accountId'
      fullPath: '/accounts/$accountId'
      preLoaderRoute: typeof AccountsAccountIdRouteImport
      parentRoute: typeof AccountsRoute
    }
  }
}

interface AccountsRouteChildren {
  AccountsAccountIdRoute: typeof AccountsAccountIdRoute
  AccountsIndexRoute: typeof AccountsIndexRoute
}

const AccountsRouteChildren: AccountsRouteChildren = {
  AccountsAccountIdRoute: AccountsAccountIdRoute,
  AccountsIndexRoute: AccountsIndexRoute,
}

const AccountsRouteWithChildren = AccountsRoute._addFileChildren(
  AccountsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountsRoute: AccountsRouteWithChildren,
  BudgetsRoute: BudgetsRoute,
  DashboardRoute: DashboardRoute,
  GoalsRoute: GoalsRoute,
  ReportsRoute: ReportsRoute,
  SettingsRoute: SettingsRoute,
  TransactionsRoute: TransactionsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
