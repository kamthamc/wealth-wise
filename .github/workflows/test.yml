name: 🧪 Test Suite

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run full test suite nightly at 3 AM UTC
    - cron: '0 3 * * *'

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  DOTNET_VERSION: '8.0.x'
  FLUTTER_VERSION: '3.16.0'

jobs:
  # Unit Tests
  unit-tests:
    name: 🔬 Unit Tests
    strategy:
      fail-fast: false
      matrix:
        platform: [shared, ios, android, windows]
        include:
          - platform: shared
            runs-on: ubuntu-latest
          - platform: ios
            runs-on: macos-14
          - platform: android
            runs-on: ubuntu-latest
          - platform: windows
            runs-on: windows-latest
    
    runs-on: ${{ matrix.runs-on }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      # Shared TypeScript Tests
      - name: 📦 Setup Node.js (Shared)
        if: matrix.platform == 'shared'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'shared/package.json'

      - name: 🧪 Run Shared Tests
        if: matrix.platform == 'shared'
        working-directory: shared
        run: |
          npm ci
          npm run test:coverage

      # iOS Tests
      - name: 🧪 Run iOS Tests
        if: matrix.platform == 'ios'
        run: |
          cd ios
          pod install
          xcodebuild test \
            -workspace UnifiedBanking.xcworkspace \
            -scheme UnifiedBankingTests \
            -destination "platform=iOS Simulator,name=iPhone 15 Pro" \
            -enableCodeCoverage YES \
            -resultBundlePath TestResults.xcresult

      # Android Tests  
      - name: ☕ Setup Java (Android)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🧪 Run Android Tests
        if: matrix.platform == 'android'
        working-directory: android
        run: |
          chmod +x gradlew
          ./gradlew test testReleaseUnitTest --continue
          ./gradlew jacocoTestReport

      # Windows Tests
      - name: 🔧 Setup .NET (Windows)
        if: matrix.platform == 'windows'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 🧪 Run Windows Tests
        if: matrix.platform == 'windows'
        working-directory: windows
        run: |
          dotnet restore
          dotnet test --configuration Release --collect:"XPlat Code Coverage" --results-directory TestResults

      # Upload Test Results
      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.platform }}-test-results
          path: |
            shared/coverage/
            ios/TestResults.xcresult
            android/app/build/reports/
            android/app/build/test-results/
            windows/TestResults/

  # Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: ${{ !cancelled() }}
    
    services:
      # Firebase Emulator Suite
      firebase:
        image: andreysenov/firebase-tools:latest
        ports:
          - 9099:9099  # Auth
          - 8080:8080  # Firestore
          - 9199:9199  # Storage
          - 5001:5001  # Functions
        options: >-
          --health-cmd "curl -f http://localhost:4000 || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔥 Install Firebase CLI
        run: npm install -g firebase-tools

      - name: 🚀 Start Firebase Emulators
        run: |
          firebase emulators:start --only auth,firestore,storage,functions --project demo-project &
          sleep 10  # Wait for emulators to start

      - name: 🧪 Run Integration Tests
        run: |
          # Test Firebase integration
          cd shared
          npm ci
          npm run test:integration
        env:
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_STORAGE_EMULATOR_HOST: localhost:9199

      - name: 📊 Upload Integration Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: shared/coverage/integration/

  # End-to-End Tests
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name != 'schedule'  # Skip E2E on scheduled runs
    
    strategy:
      fail-fast: false
      matrix:
        platform: [ios, android]
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # iOS E2E Tests with Detox
      - name: 🍎 iOS E2E Setup
        if: matrix.platform == 'ios'
        run: |
          cd ios
          npm install -g detox-cli
          npm install
          pod install
          
      - name: 🧪 Run iOS E2E Tests
        if: matrix.platform == 'ios'
        run: |
          cd ios
          detox build --configuration ios.sim.release
          detox test --configuration ios.sim.release --cleanup

      # Android E2E Tests with Detox
      - name: ☕ Setup Java (Android E2E)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🔧 Setup Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v3

      - name: 📱 Create Android Emulator
        if: matrix.platform == 'android'
        run: |
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "system-images;android-34;google_apis;x86_64"
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd --force --name test --abi google_apis/x86_64 --package "system-images;android-34;google_apis;x86_64"
          
      - name: 🚀 Start Android Emulator
        if: matrix.platform == 'android'
        run: |
          $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window -gpu swiftshader_indirect -no-snapshot -wipe-data -camera-back none &
          adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'

      - name: 🧪 Run Android E2E Tests
        if: matrix.platform == 'android'
        run: |
          cd android
          npm install -g detox-cli
          npm install
          detox build --configuration android.emu.release
          detox test --configuration android.emu.release --cleanup

      - name: 📊 Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.platform }}-e2e-results
          path: |
            ios/e2e/artifacts/
            android/e2e/artifacts/

  # Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: macos-14  # Better performance for mobile testing
    needs: unit-tests
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🍎 iOS Performance Test
        run: |
          cd ios
          pod install
          
          # Build for performance testing
          xcodebuild \
            -workspace UnifiedBanking.xcworkspace \
            -scheme UnifiedBanking \
            -configuration Release \
            -destination "platform=iOS Simulator,name=iPhone 15 Pro" \
            build-for-testing
          
          # Run performance tests
          xcodebuild \
            -workspace UnifiedBanking.xcworkspace \
            -scheme UnifiedBankingPerformanceTests \
            -destination "platform=iOS Simulator,name=iPhone 15 Pro" \
            test

      - name: 📊 Upload Performance Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: ios/PerformanceTestResults.xcresult

  # Accessibility Tests
  accessibility-tests:
    name: ♿ Accessibility Tests
    runs-on: macos-14
    needs: unit-tests
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🍎 iOS Accessibility Test
        run: |
          cd ios
          pod install
          
          # Run accessibility tests
          xcodebuild test \
            -workspace UnifiedBanking.xcworkspace \
            -scheme UnifiedBankingAccessibilityTests \
            -destination "platform=iOS Simulator,name=iPhone 15 Pro"

      - name: 📊 Upload Accessibility Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: ios/AccessibilityTestResults.xcresult

  # Test Report Generation
  test-report:
    name: 📋 Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, accessibility-tests]
    if: always()
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⬇️ Download All Test Results
        uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: 📊 Generate Test Report
        run: |
          mkdir -p final-report
          
          cat > final-report/test-summary.md << 'EOF'
          # 🧪 Test Suite Report
          
          **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Repository**: ${{ github.repository }}
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          **Trigger**: ${{ github.event_name }}
          
          ## 📊 Test Results Summary
          
          ### Unit Tests
          - **Shared**: ${{ needs.unit-tests.result }}
          - **iOS**: ${{ needs.unit-tests.result }}
          - **Android**: ${{ needs.unit-tests.result }}
          - **Windows**: ${{ needs.unit-tests.result }}
          
          ### Integration Tests
          - **Firebase Integration**: ${{ needs.integration-tests.result }}
          
          ### End-to-End Tests
          - **iOS E2E**: ${{ needs.e2e-tests.result }}
          - **Android E2E**: ${{ needs.e2e-tests.result }}
          
          ### Performance Tests
          - **iOS Performance**: ${{ needs.performance-tests.result }}
          
          ### Accessibility Tests
          - **iOS Accessibility**: ${{ needs.accessibility-tests.result }}
          
          ## 🎯 Coverage Summary
          
          Coverage reports are available in the individual test result artifacts.
          
          ## 🚨 Failed Tests
          
          $(if [ "${{ needs.unit-tests.result }}" = "failure" ] || [ "${{ needs.integration-tests.result }}" = "failure" ] || [ "${{ needs.e2e-tests.result }}" = "failure" ]; then echo "⚠️ Some tests failed. Please review the detailed reports."; else echo "✅ All tests passed successfully!"; fi)
          
          ## 📁 Detailed Reports
          
          All detailed test reports and coverage data are available in the workflow artifacts.
          
          ---
          *Generated automatically by GitHub Actions*
          EOF

      - name: 📤 Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-suite-report
          path: final-report/

      - name: 💬 Comment Test Results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'final-report/test-summary.md';
            
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            }

  # Quality Gate
  quality-gate:
    name: 🚪 Quality Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()
    
    steps:
      - name: 🔍 Evaluate Quality Gate
        run: |
          echo "Evaluating quality gate..."
          
          # Check if critical tests passed
          if [ "${{ needs.unit-tests.result }}" != "success" ]; then
            echo "❌ Unit tests failed - Quality gate blocked"
            exit 1
          fi
          
          if [ "${{ needs.integration-tests.result }}" != "success" ]; then
            echo "❌ Integration tests failed - Quality gate blocked"
            exit 1
          fi
          
          echo "✅ Quality gate passed"

      - name: 📢 Quality Gate Status
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          channel: '#quality-alerts'
          text: |
            🚨 *QUALITY GATE FAILURE*
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Critical tests have failed. Deployment blocked.
            
            🔗 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.QUALITY_SLACK_WEBHOOK_URL }}