/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AccountsIndexRouteImport } from './routes/accounts/index'
import { Route as AuthTransactionsRouteImport } from './routes/_auth.transactions'
import { Route as AuthSettingsRouteImport } from './routes/_auth.settings'
import { Route as AuthReportsRouteImport } from './routes/_auth.reports'
import { Route as AuthGoalsRouteImport } from './routes/_auth.goals'
import { Route as AuthDashboardRouteImport } from './routes/_auth.dashboard'
import { Route as AuthBudgetsRouteImport } from './routes/_auth.budgets'
import { Route as AuthAccountsRouteImport } from './routes/_auth.accounts'
import { Route as AuthAccountsAccountIdRouteImport } from './routes/_auth.accounts.$accountId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountsIndexRoute = AccountsIndexRouteImport.update({
  id: '/accounts/',
  path: '/accounts/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthTransactionsRoute = AuthTransactionsRouteImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSettingsRoute = AuthSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthRoute,
} as any)
const AuthReportsRoute = AuthReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => AuthRoute,
} as any)
const AuthGoalsRoute = AuthGoalsRouteImport.update({
  id: '/goals',
  path: '/goals',
  getParentRoute: () => AuthRoute,
} as any)
const AuthDashboardRoute = AuthDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)
const AuthBudgetsRoute = AuthBudgetsRouteImport.update({
  id: '/budgets',
  path: '/budgets',
  getParentRoute: () => AuthRoute,
} as any)
const AuthAccountsRoute = AuthAccountsRouteImport.update({
  id: '/accounts',
  path: '/accounts',
  getParentRoute: () => AuthRoute,
} as any)
const AuthAccountsAccountIdRoute = AuthAccountsAccountIdRouteImport.update({
  id: '/$accountId',
  path: '/$accountId',
  getParentRoute: () => AuthAccountsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/accounts': typeof AccountsIndexRoute
  '/budgets': typeof AuthBudgetsRoute
  '/dashboard': typeof AuthDashboardRoute
  '/goals': typeof AuthGoalsRoute
  '/reports': typeof AuthReportsRoute
  '/settings': typeof AuthSettingsRoute
  '/transactions': typeof AuthTransactionsRoute
  '/accounts/$accountId': typeof AuthAccountsAccountIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/accounts': typeof AccountsIndexRoute
  '/budgets': typeof AuthBudgetsRoute
  '/dashboard': typeof AuthDashboardRoute
  '/goals': typeof AuthGoalsRoute
  '/reports': typeof AuthReportsRoute
  '/settings': typeof AuthSettingsRoute
  '/transactions': typeof AuthTransactionsRoute
  '/accounts/$accountId': typeof AuthAccountsAccountIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/_auth/accounts': typeof AuthAccountsRouteWithChildren
  '/_auth/budgets': typeof AuthBudgetsRoute
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/_auth/goals': typeof AuthGoalsRoute
  '/_auth/reports': typeof AuthReportsRoute
  '/_auth/settings': typeof AuthSettingsRoute
  '/_auth/transactions': typeof AuthTransactionsRoute
  '/accounts/': typeof AccountsIndexRoute
  '/_auth/accounts/$accountId': typeof AuthAccountsAccountIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/accounts'
    | '/budgets'
    | '/dashboard'
    | '/goals'
    | '/reports'
    | '/settings'
    | '/transactions'
    | '/accounts/$accountId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/accounts'
    | '/budgets'
    | '/dashboard'
    | '/goals'
    | '/reports'
    | '/settings'
    | '/transactions'
    | '/accounts/$accountId'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/_auth/accounts'
    | '/_auth/budgets'
    | '/_auth/dashboard'
    | '/_auth/goals'
    | '/_auth/reports'
    | '/_auth/settings'
    | '/_auth/transactions'
    | '/accounts/'
    | '/_auth/accounts/$accountId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
  AccountsIndexRoute: typeof AccountsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/accounts/': {
      id: '/accounts/'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof AccountsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/transactions': {
      id: '/_auth/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof AuthTransactionsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/settings': {
      id: '/_auth/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthSettingsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/reports': {
      id: '/_auth/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof AuthReportsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/goals': {
      id: '/_auth/goals'
      path: '/goals'
      fullPath: '/goals'
      preLoaderRoute: typeof AuthGoalsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/budgets': {
      id: '/_auth/budgets'
      path: '/budgets'
      fullPath: '/budgets'
      preLoaderRoute: typeof AuthBudgetsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/accounts': {
      id: '/_auth/accounts'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof AuthAccountsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/accounts/$accountId': {
      id: '/_auth/accounts/$accountId'
      path: '/$accountId'
      fullPath: '/accounts/$accountId'
      preLoaderRoute: typeof AuthAccountsAccountIdRouteImport
      parentRoute: typeof AuthAccountsRoute
    }
  }
}

interface AuthAccountsRouteChildren {
  AuthAccountsAccountIdRoute: typeof AuthAccountsAccountIdRoute
}

const AuthAccountsRouteChildren: AuthAccountsRouteChildren = {
  AuthAccountsAccountIdRoute: AuthAccountsAccountIdRoute,
}

const AuthAccountsRouteWithChildren = AuthAccountsRoute._addFileChildren(
  AuthAccountsRouteChildren,
)

interface AuthRouteChildren {
  AuthAccountsRoute: typeof AuthAccountsRouteWithChildren
  AuthBudgetsRoute: typeof AuthBudgetsRoute
  AuthDashboardRoute: typeof AuthDashboardRoute
  AuthGoalsRoute: typeof AuthGoalsRoute
  AuthReportsRoute: typeof AuthReportsRoute
  AuthSettingsRoute: typeof AuthSettingsRoute
  AuthTransactionsRoute: typeof AuthTransactionsRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAccountsRoute: AuthAccountsRouteWithChildren,
  AuthBudgetsRoute: AuthBudgetsRoute,
  AuthDashboardRoute: AuthDashboardRoute,
  AuthGoalsRoute: AuthGoalsRoute,
  AuthReportsRoute: AuthReportsRoute,
  AuthSettingsRoute: AuthSettingsRoute,
  AuthTransactionsRoute: AuthTransactionsRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
  AccountsIndexRoute: AccountsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
